{"version":3,"file":"vendor-c28478b8.js","sources":["../../../../../../../../../../../node_modules/svelte/internal/index.mjs","../../../../../../../../../../../node_modules/svelte/store/index.mjs","../../../../../../../../../../../node_modules/tslib/tslib.es6.js","../../../../../../../../../../../node_modules/@firebase/util/dist/index.esm.js","../../../../../../../../../../../node_modules/@firebase/component/dist/index.esm.js","../../../../../../../../../../../node_modules/@firebase/logger/dist/index.esm.js","../../../../../../../../../../../node_modules/@firebase/app/dist/index.esm2017.js","../../../../../../../../../../../node_modules/firebase/app/dist/index.esm.js","../../../../../../../../../../../node_modules/@firebase/database/dist/exp/index.esm2017.js","../../../../../../../../../../../node_modules/svelte/easing/index.mjs","../../../../../../../../../../../node_modules/svelte/transition/index.mjs"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root.host) {\n        return root;\n    }\n    return document;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => svg ? svg_element(name) : element(name));\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.42.1' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","
\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n
\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n
\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { __assign, __extends } from 'tslib';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nvar CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nvar assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nvar assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [];\r\n    var p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nvar byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [];\r\n    var pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        var c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            var c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            var c4 = bytes[pos++];\r\n            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nvar base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray: function (input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        var byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length; i += 3) {\r\n            var byte1 = input[i];\r\n            var haveByte2 = i + 1 < input.length;\r\n            var byte2 = haveByte2 ? input[i + 1] : 0;\r\n            var haveByte3 = i + 2 < input.length;\r\n            var byte3 = haveByte3 ? input[i + 2] : 0;\r\n            var outByte1 = byte1 >> 2;\r\n            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            var outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString: function (input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString: function (input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray: function (input, webSafe) {\r\n        this.init_();\r\n        var charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length;) {\r\n            var byte1 = charToByteMap[input.charAt(i++)];\r\n            var haveByte2 = i < input.length;\r\n            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            var haveByte3 = i < input.length;\r\n            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            var haveByte4 = i < input.length;\r\n            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            var outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_: function () {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (var i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nvar base64Encode = function (str) {\r\n    var utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nvar base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            var dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (var prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Deferred = 
 (function () {\r\n    function Deferred() {\r\n        var _this = this;\r\n        this.reject = function () { };\r\n        this.resolve = function () { };\r\n        this.promise = new Promise(function (resolve, reject) {\r\n            _this.resolve = resolve;\r\n            _this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    Deferred.prototype.wrapCallback = function (callback) {\r\n        var _this = this;\r\n        return function (error, value) {\r\n            if (error) {\r\n                _this.reject(error);\r\n            }\r\n            else {\r\n                _this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                _this.promise.catch(function () { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    return Deferred;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    var header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    var project = projectId || 'demo-project';\r\n    var iat = token.iat || 0;\r\n    var sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    var payload = __assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: \"https://securetoken.google.com/\" + project, aud: project, iat: iat, exp: iat + 3600, auth_time: iat, sub: sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    var signature = '';\r\n    return [\r\n        base64.encodeString(JSON.stringify(header), /*webSafe=*/ false),\r\n        base64.encodeString(JSON.stringify(payload), /*webSafe=*/ false),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    var runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n
\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n
\r\nfunction isIE() {\r\n    var ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n
\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n
\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return 'indexedDB' in self && indexedDB != null;\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise(function (resolve, reject) {\r\n        try {\r\n            var preExist_1 = true;\r\n            var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            var request_1 = self.indexedDB.open(DB_CHECK_NAME_1);\r\n            request_1.onsuccess = function () {\r\n                request_1.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist_1) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME_1);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request_1.onupgradeneeded = function () {\r\n                preExist_1 = false;\r\n            };\r\n            request_1.onerror = function () {\r\n                var _a;\r\n                reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (!navigator || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nvar FirebaseError = 
 (function (_super) {\r\n    __extends(FirebaseError, _super);\r\n    function FirebaseError(code, message, customData) {\r\n        var _this = _super.call(this, message) || this;\r\n        _this.code = code;\r\n        _this.customData = customData;\r\n        _this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(_this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(_this, ErrorFactory.prototype.create);\r\n        }\r\n        return _this;\r\n    }\r\n    return FirebaseError;\r\n}(Error));\r\nvar ErrorFactory = 
 (function () {\r\n    function ErrorFactory(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    ErrorFactory.prototype.create = function (code) {\r\n        var data = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            data[_i - 1] = arguments[_i];\r\n        }\r\n        var customData = data[0] || {};\r\n        var fullCode = this.service + \"/\" + code;\r\n        var template = this.errors[code];\r\n        var message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        var fullMessage = this.serviceName + \": \" + message + \" (\" + fullCode + \").\";\r\n        var error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    };\r\n    return ErrorFactory;\r\n}());\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, function (_, key) {\r\n        var value = data[key];\r\n        return value != null ? String(value) : \"<\" + key + \"?>\";\r\n    });\r\n}\r\nvar PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nvar decode = function (token) {\r\n    var header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        var parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header: header,\r\n        claims: claims,\r\n        data: data,\r\n        signature: signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nvar isValidTimestamp = function (token) {\r\n    var claims = decode(token).claims;\r\n    var now = Math.floor(new Date().getTime() / 1000);\r\n    var validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nvar issuedAtTime = function (token) {\r\n    var claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nvar isValidFormat = function (token) {\r\n    var decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nvar isAdmin = function (token) {\r\n    var claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    var res = {};\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    var aKeys = Object.keys(a);\r\n    var bKeys = Object.keys(b);\r\n    for (var _i = 0, aKeys_1 = aKeys; _i < aKeys_1.length; _i++) {\r\n        var k = aKeys_1[_i];\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        var aProp = a[k];\r\n        var bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (var _a = 0, bKeys_1 = bKeys; _a < bKeys_1.length; _a++) {\r\n        var k = bKeys_1[_a];\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    var params = [];\r\n    var _loop_1 = function (key, value) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(function (arrayVal) {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    };\r\n    for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {\r\n        var _b = _a[_i], key = _b[0], value = _b[1];\r\n        _loop_1(key, value);\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    var obj = {};\r\n    var tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(function (token) {\r\n        if (token) {\r\n            var _a = token.split('='), key = _a[0], value = _a[1];\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    var queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    var fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nvar Sha1 = 
 (function () {\r\n    function Sha1() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (var i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    Sha1.prototype.reset = function () {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    };\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    Sha1.prototype.compress_ = function (buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        var W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (var i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (var i = 16; i < 80; i++) {\r\n            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        var a = this.chain_[0];\r\n        var b = this.chain_[1];\r\n        var c = this.chain_[2];\r\n        var d = this.chain_[3];\r\n        var e = this.chain_[4];\r\n        var f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (var i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    };\r\n    Sha1.prototype.update = function (bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        var lengthMinusBlock = length - this.blockSize;\r\n        var n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        var buf = this.buf_;\r\n        var inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    };\r\n    
\r\n    Sha1.prototype.digest = function () {\r\n        var digest = [];\r\n        var totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (var i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        var n = 0;\r\n        for (var i = 0; i < 5; i++) {\r\n            for (var j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    };\r\n    return Sha1;\r\n}());\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    var proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nvar ObserverProxy = 
 (function () {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    function ObserverProxy(executor, onNoObservers) {\r\n        var _this = this;\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(function () {\r\n            executor(_this);\r\n        })\r\n            .catch(function (e) {\r\n            _this.error(e);\r\n        });\r\n    }\r\n    ObserverProxy.prototype.next = function (value) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.next(value);\r\n        });\r\n    };\r\n    ObserverProxy.prototype.error = function (error) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    };\r\n    ObserverProxy.prototype.complete = function () {\r\n        this.forEachObserver(function (observer) {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    };\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\r\n        var _this = this;\r\n        var observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error: error,\r\n                complete: complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        var unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(function () {\r\n                try {\r\n                    if (_this.finalError) {\r\n                        observer.error(_this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    };\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    ObserverProxy.prototype.unsubscribeOne = function (i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    };\r\n    ObserverProxy.prototype.forEachObserver = function (fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (var i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    };\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    ObserverProxy.prototype.sendOne = function (i, fn) {\r\n        var _this = this;\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(function () {\r\n            if (_this.observers !== undefined && _this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(_this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    ObserverProxy.prototype.close = function (err) {\r\n        var _this = this;\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(function () {\r\n            _this.observers = undefined;\r\n            _this.onNoObservers = undefined;\r\n        });\r\n    };\r\n    return ObserverProxy;\r\n}());\r\n
\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        Promise.resolve(true)\r\n            .then(function () {\r\n            fn.apply(void 0, args);\r\n        })\r\n            .catch(function (error) {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\r\n        var method = methods_1[_i];\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nvar validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    var argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        var error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return fnName + \" failed: \" + argName + \" argument \";\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nvar stringToByteArray = function (str) {\r\n    var out = [];\r\n    var p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            var high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nvar stringLength = function (str) {\r\n    var p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nvar DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nvar DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nvar MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nvar RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {\r\n    if (intervalMillis === void 0) { intervalMillis = DEFAULT_INTERVAL_MILLIS; }\r\n    if (backoffFactor === void 0) { backoffFactor = DEFAULT_BACKOFF_FACTOR; }\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    var randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return \"\" + i;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    var cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    var dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm.js.map\n","import { __values, __read, __awaiter, __generator, __spreadArray } from 'tslib';\nimport { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nvar Component = 
 (function () {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    function Component(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    Component.prototype.setInstantiationMode = function (mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    };\r\n    Component.prototype.setMultipleInstances = function (multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    };\r\n    Component.prototype.setServiceProps = function (props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    };\r\n    Component.prototype.setInstanceCreatedCallback = function (callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    };\r\n    return Component;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nvar Provider = 
 (function () {\r\n    function Provider(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    Provider.prototype.get = function (identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            var deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    var instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    };\r\n    Provider.prototype.getImmediate = function (options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(\"Service \" + this.name + \" is not available\");\r\n            }\r\n        }\r\n    };\r\n    Provider.prototype.getComponent = function () {\r\n        return this.component;\r\n    };\r\n    Provider.prototype.setComponent = function (component) {\r\n        var e_1, _a;\r\n        if (component.name !== this.name) {\r\n            throw Error(\"Mismatching Component \" + component.name + \" for Provider \" + this.name + \".\");\r\n        }\r\n        if (this.component) {\r\n            throw Error(\"Component for \" + this.name + \" has already been provided\");\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        try {\r\n            // Create service instances for the pending promises and resolve them\r\n            // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n            // and all promises with resolve with it regardless of the identifier.\r\n            for (var _b = __values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var _d = __read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];\r\n                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n                try {\r\n                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                    var instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    instanceDeferred.resolve(instance);\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception, it should not cause\r\n                    // a fatal error. We just leave the promise unresolved.\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    };\r\n    Provider.prototype.clearInstance = function (identifier) {\r\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    };\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    Provider.prototype.delete = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var services;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        services = Array.from(this.instances.values());\r\n                        return [4 /*yield*/, Promise.all(__spreadArray(__spreadArray([], __read(services\r\n                                .filter(function (service) { return 'INTERNAL' in service; }) // legacy services\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                .map(function (service) { return service.INTERNAL.delete(); }))), __read(services\r\n                                .filter(function (service) { return '_delete' in service; }) // modularized services\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                .map(function (service) { return service._delete(); }))))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Provider.prototype.isComponentSet = function () {\r\n        return this.component != null;\r\n    };\r\n    Provider.prototype.isInitialized = function (identifier) {\r\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\r\n        return this.instances.has(identifier);\r\n    };\r\n    Provider.prototype.initialize = function (opts) {\r\n        var e_2, _a;\r\n        if (opts === void 0) { opts = {}; }\r\n        var _b = opts.options, options = _b === void 0 ? {} : _b;\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(this.name + \"(\" + normalizedIdentifier + \") has already been initialized\");\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(\"Component \" + this.name + \" has not been registered yet\");\r\n        }\r\n        var instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options: options\r\n        });\r\n        try {\r\n            // resolve any pending promise waiting for the service instance\r\n            for (var _c = __values(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                var _e = __read(_d.value, 2), instanceIdentifier = _e[0], instanceDeferred = _e[1];\r\n                var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n                if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                    instanceDeferred.resolve(instance);\r\n                }\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n        return instance;\r\n    };\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    Provider.prototype.onInit = function (callback, identifier) {\r\n        var _a;\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        var existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return function () {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    };\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {\r\n        var e_3, _a;\r\n        var callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        try {\r\n            for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {\r\n                var callback = callbacks_1_1.value;\r\n                try {\r\n                    callback(instance, identifier);\r\n                }\r\n                catch (_b) {\r\n                    // ignore errors in the onInit callback\r\n                }\r\n            }\r\n        }\r\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n        finally {\r\n            try {\r\n                if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);\r\n            }\r\n            finally { if (e_3) throw e_3.error; }\r\n        }\r\n    };\r\n    Provider.prototype.getOrInitializeService = function (_a) {\r\n        var instanceIdentifier = _a.instanceIdentifier, _b = _a.options, options = _b === void 0 ? {} : _b;\r\n        var instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options: options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_c) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    };\r\n    Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\r\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    };\r\n    Provider.prototype.shouldAutoInitialize = function () {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    };\r\n    return Provider;\r\n}());\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nvar ComponentContainer = 
 (function () {\r\n    function ComponentContainer(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    ComponentContainer.prototype.addComponent = function (component) {\r\n        var provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(\"Component \" + component.name + \" has already been registered with \" + this.name);\r\n        }\r\n        provider.setComponent(component);\r\n    };\r\n    ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\r\n        var provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    };\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    ComponentContainer.prototype.getProvider = function (name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        var provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    };\r\n    ComponentContainer.prototype.getProviders = function () {\r\n        return Array.from(this.providers.values());\r\n    };\r\n    return ComponentContainer;\r\n}());\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm.js.map\n","
\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _a;\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nvar instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nvar levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nvar defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nvar ConsoleMethod = (_a = {},\r\n    _a[LogLevel.DEBUG] = 'log',\r\n    _a[LogLevel.VERBOSE] = 'log',\r\n    _a[LogLevel.INFO] = 'info',\r\n    _a[LogLevel.WARN] = 'warn',\r\n    _a[LogLevel.ERROR] = 'error',\r\n    _a);\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nvar defaultLogHandler = function (instance, logType) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    var now = new Date().toISOString();\r\n    var method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method].apply(console, __spreadArrays([\"[\" + now + \"]  \" + instance.name + \":\"], args));\r\n    }\r\n    else {\r\n        throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n    }\r\n};\r\nvar Logger = 
 (function () {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    function Logger(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n        get: function () {\r\n            return this._logLevel;\r\n        },\r\n        set: function (val) {\r\n            if (!(val in LogLevel)) {\r\n                throw new TypeError(\"Invalid value \\\"\" + val + \"\\\" assigned to `logLevel`\");\r\n            }\r\n            this._logLevel = val;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    // Workaround for setter/getter having to be the same type.\r\n    Logger.prototype.setLogLevel = function (val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    };\r\n    Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n        get: function () {\r\n            return this._logHandler;\r\n        },\r\n        set: function (val) {\r\n            if (typeof val !== 'function') {\r\n                throw new TypeError('Value assigned to `logHandler` must be a function');\r\n            }\r\n            this._logHandler = val;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Logger.prototype, \"userLogHandler\", {\r\n        get: function () {\r\n            return this._userLogHandler;\r\n        },\r\n        set: function (val) {\r\n            this._userLogHandler = val;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    Logger.prototype.debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));\r\n        this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));\r\n    };\r\n    Logger.prototype.log = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));\r\n        this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));\r\n    };\r\n    Logger.prototype.info = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));\r\n        this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));\r\n    };\r\n    Logger.prototype.warn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));\r\n        this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));\r\n    };\r\n    Logger.prototype.error = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));\r\n        this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));\r\n    };\r\n    return Logger;\r\n}());\r\nfunction setLogLevel(level) {\r\n    instances.forEach(function (inst) {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    var _loop_1 = function (instance) {\r\n        var customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = function (instance, level) {\r\n                var args = [];\r\n                for (var _i = 2; _i < arguments.length; _i++) {\r\n                    args[_i - 2] = arguments[_i];\r\n                }\r\n                var message = args\r\n                    .map(function (arg) {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(function (arg) { return arg; })\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message: message,\r\n                        args: args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    };\r\n    for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {\r\n        var instance = instances_1[_i];\r\n        _loop_1(instance);\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm.js.map\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual } from '@firebase/util';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app-exp\";\nconst version$1 = \"0.0.900-exp.8b4d7550f\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics-exp\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check-exp\";\n\nconst name$i = \"@firebase/auth-exp\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions-exp\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations-exp\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging-exp\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance-exp\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config-exp\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase-exp\";\nconst version = \"9.0.0-beta.8\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app-exp', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a FirebaseApp instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents();\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase-exp\";\nvar version = \"9.0.0-beta.8\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION as SDK_VERSION$1 } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.0.900-exp.8b4d7550f\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n
\r\nlet SDK_VERSION = '';\r\n// SDK_VERSION should be set before any database instance is created\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n
\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n
\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n
\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n
\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange = function () {\r\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                        const rstate = newScript.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            newScript.onload = newScript.onreadystatechange = null;\r\n                            if (newScript.parentNode) {\r\n                                newScript.parentNode.removeChild(newScript);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                const options = {\r\n                    headers: {\r\n                        'X-Firebase-GMPID': this.applicationId || '',\r\n                        'X-Firebase-AppCheck': this.appCheckToken || ''\r\n                    }\r\n                };\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n
\r\nconst MAX_PATH_DEPTH = 32;\r\n
\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        
\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    
\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    
\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    
\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    
\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    
\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    
\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    
\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    
\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    
\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    
\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    
\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    
\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    
\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    
\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    
\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    
\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    
\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    
\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    
\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    
\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    
\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    
\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    
\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    
\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    
\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        
\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    
\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    
\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    
\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    
 path, \r\n    
 affectedTree, \r\n    
 revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        
\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        
\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        
\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        
\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    
 source, \r\n    
 path, \r\n    
 children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        
\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        
\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        
\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath 
, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    
\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    
\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    
\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A promise which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase node.js admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing repo in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined') {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    
\r\n    constructor(_repoInternal, \r\n    
\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        
\r\n        this['type'] = 'database';\r\n        
\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `FirebaseDatabase` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database-exp').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database-exp', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app-exp').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of Firebase.transaction.\r\n */\r\nclass TransactionResult {\r\n    
\r\n    constructor(\r\n    
\r\n    committed, \r\n    
\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    
\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `transaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A Promise that can optionally be used instead of the onComplete\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, ReferenceImpl as _ReferenceImpl, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","export { identity as linear } from '../internal/index.mjs';\n\n/*\nAdapted from https://github.com/mattdesl\nDistributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md\n*/\nfunction backInOut(t) {\n    const s = 1.70158 * 1.525;\n    if ((t *= 2) < 1)\n        return 0.5 * (t * t * ((s + 1) * t - s));\n    return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2);\n}\nfunction backIn(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n}\nfunction backOut(t) {\n    const s = 1.70158;\n    return --t * t * ((s + 1) * t + s) + 1;\n}\nfunction bounceOut(t) {\n    const a = 4.0 / 11.0;\n    const b = 8.0 / 11.0;\n    const c = 9.0 / 10.0;\n    const ca = 4356.0 / 361.0;\n    const cb = 35442.0 / 1805.0;\n    const cc = 16061.0 / 1805.0;\n    const t2 = t * t;\n    return t < a\n        ? 7.5625 * t2\n        : t < b\n            ? 9.075 * t2 - 9.9 * t + 3.4\n            : t < c\n                ? ca * t2 - cb * t + cc\n                : 10.8 * t * t - 20.52 * t + 10.72;\n}\nfunction bounceInOut(t) {\n    return t < 0.5\n        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\n        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;\n}\nfunction bounceIn(t) {\n    return 1.0 - bounceOut(1.0 - t);\n}\nfunction circInOut(t) {\n    if ((t *= 2) < 1)\n        return -0.5 * (Math.sqrt(1 - t * t) - 1);\n    return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n}\nfunction circIn(t) {\n    return 1.0 - Math.sqrt(1.0 - t * t);\n}\nfunction circOut(t) {\n    return Math.sqrt(1 - --t * t);\n}\nfunction cubicInOut(t) {\n    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\nfunction cubicIn(t) {\n    return t * t * t;\n}\nfunction cubicOut(t) {\n    const f = t - 1.0;\n    return f * f * f + 1.0;\n}\nfunction elasticInOut(t) {\n    return t < 0.5\n        ? 0.5 *\n            Math.sin(((+13.0 * Math.PI) / 2) * 2.0 * t) *\n            Math.pow(2.0, 10.0 * (2.0 * t - 1.0))\n        : 0.5 *\n            Math.sin(((-13.0 * Math.PI) / 2) * (2.0 * t - 1.0 + 1.0)) *\n            Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) +\n            1.0;\n}\nfunction elasticIn(t) {\n    return Math.sin((13.0 * t * Math.PI) / 2) * Math.pow(2.0, 10.0 * (t - 1.0));\n}\nfunction elasticOut(t) {\n    return (Math.sin((-13.0 * (t + 1.0) * Math.PI) / 2) * Math.pow(2.0, -10.0 * t) + 1.0);\n}\nfunction expoInOut(t) {\n    return t === 0.0 || t === 1.0\n        ? t\n        : t < 0.5\n            ? +0.5 * Math.pow(2.0, 20.0 * t - 10.0)\n            : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0;\n}\nfunction expoIn(t) {\n    return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));\n}\nfunction expoOut(t) {\n    return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t);\n}\nfunction quadInOut(t) {\n    t /= 0.5;\n    if (t < 1)\n        return 0.5 * t * t;\n    t--;\n    return -0.5 * (t * (t - 2) - 1);\n}\nfunction quadIn(t) {\n    return t * t;\n}\nfunction quadOut(t) {\n    return -t * (t - 2.0);\n}\nfunction quartInOut(t) {\n    return t < 0.5\n        ? +8.0 * Math.pow(t, 4.0)\n        : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0;\n}\nfunction quartIn(t) {\n    return Math.pow(t, 4.0);\n}\nfunction quartOut(t) {\n    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\n}\nfunction quintInOut(t) {\n    if ((t *= 2) < 1)\n        return 0.5 * t * t * t * t * t;\n    return 0.5 * ((t -= 2) * t * t * t * t + 2);\n}\nfunction quintIn(t) {\n    return t * t * t * t * t;\n}\nfunction quintOut(t) {\n    return --t * t * t * t * t + 1;\n}\nfunction sineInOut(t) {\n    return -0.5 * (Math.cos(Math.PI * t) - 1);\n}\nfunction sineIn(t) {\n    const v = Math.cos(t * Math.PI * 0.5);\n    if (Math.abs(v) < 1e-14)\n        return 1;\n    else\n        return 1 - v;\n}\nfunction sineOut(t) {\n    return Math.sin((t * Math.PI) / 2);\n}\n\nexport { backIn, backInOut, backOut, bounceIn, bounceInOut, bounceOut, circIn, circInOut, circOut, cubicIn, cubicInOut, cubicOut, elasticIn, elasticInOut, elasticOut, expoIn, expoInOut, expoOut, quadIn, quadInOut, quadOut, quartIn, quartInOut, quartOut, quintIn, quintInOut, quintOut, sineIn, sineInOut, sineOut };\n","import { cubicInOut, linear, cubicOut } from '../easing/index.mjs';\nimport { is_function, assign } from '../internal/index.mjs';\n\n
\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nfunction blur(node, { delay = 0, duration = 400, easing = cubicInOut, amount = 5, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const f = style.filter === 'none' ? '' : style.filter;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (_t, u) => `opacity: ${target_opacity - (od * u)}; filter: ${f} blur(${u * amount}px);`\n    };\n}\nfunction fade(node, { delay = 0, duration = 400, easing = linear } = {}) {\n    const o = +getComputedStyle(node).opacity;\n    return {\n        delay,\n        duration,\n        easing,\n        css: t => `opacity: ${t * o}`\n    };\n}\nfunction fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const transform = style.transform === 'none' ? '' : style.transform;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (t, u) => `\n\t\t\ttransform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);\n\t\t\topacity: ${target_opacity - (od * u)}`\n    };\n}\nfunction slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {\n    const style = getComputedStyle(node);\n    const opacity = +style.opacity;\n    const height = parseFloat(style.height);\n    const padding_top = parseFloat(style.paddingTop);\n    const padding_bottom = parseFloat(style.paddingBottom);\n    const margin_top = parseFloat(style.marginTop);\n    const margin_bottom = parseFloat(style.marginBottom);\n    const border_top_width = parseFloat(style.borderTopWidth);\n    const border_bottom_width = parseFloat(style.borderBottomWidth);\n    return {\n        delay,\n        duration,\n        easing,\n        css: t => 'overflow: hidden;' +\n            `opacity: ${Math.min(t * 20, 1) * opacity};` +\n            `height: ${t * height}px;` +\n            `padding-top: ${t * padding_top}px;` +\n            `padding-bottom: ${t * padding_bottom}px;` +\n            `margin-top: ${t * margin_top}px;` +\n            `margin-bottom: ${t * margin_bottom}px;` +\n            `border-top-width: ${t * border_top_width}px;` +\n            `border-bottom-width: ${t * border_bottom_width}px;`\n    };\n}\nfunction scale(node, { delay = 0, duration = 400, easing = cubicOut, start = 0, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const transform = style.transform === 'none' ? '' : style.transform;\n    const sd = 1 - start;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (_t, u) => `\n\t\t\ttransform: ${transform} scale(${1 - (sd * u)});\n\t\t\topacity: ${target_opacity - (od * u)}\n\t\t`\n    };\n}\nfunction draw(node, { delay = 0, speed, duration, easing = cubicInOut } = {}) {\n    const len = node.getTotalLength();\n    if (duration === undefined) {\n        if (speed === undefined) {\n            duration = 800;\n        }\n        else {\n            duration = len / speed;\n        }\n    }\n    else if (typeof duration === 'function') {\n        duration = duration(len);\n    }\n    return {\n        delay,\n        duration,\n        easing,\n        css: (t, u) => `stroke-dasharray: ${t * len} ${u * len}`\n    };\n}\nfunction crossfade(_a) {\n    var { fallback } = _a, defaults = __rest(_a, [\"fallback\"]);\n    const to_receive = new Map();\n    const to_send = new Map();\n    function crossfade(from, node, params) {\n        const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);\n        const to = node.getBoundingClientRect();\n        const dx = from.left - to.left;\n        const dy = from.top - to.top;\n        const dw = from.width / to.width;\n        const dh = from.height / to.height;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        const opacity = +style.opacity;\n        return {\n            delay,\n            duration: is_function(duration) ? duration(d) : duration,\n            easing,\n            css: (t, u) => `\n\t\t\t\topacity: ${t * opacity};\n\t\t\t\ttransform-origin: top left;\n\t\t\t\ttransform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});\n\t\t\t`\n        };\n    }\n    function transition(items, counterparts, intro) {\n        return (node, params) => {\n            items.set(params.key, {\n                rect: node.getBoundingClientRect()\n            });\n            return () => {\n                if (counterparts.has(params.key)) {\n                    const { rect } = counterparts.get(params.key);\n                    counterparts.delete(params.key);\n                    return crossfade(rect, node, params);\n                }\n                // if the node is disappearing altogether\n                // (i.e. wasn't claimed by the other list)\n                // then we need to supply an outro\n                items.delete(params.key);\n                return fallback && fallback(node, params, intro);\n            };\n        };\n    }\n    return [\n        transition(to_send, to_receive, false),\n        transition(to_receive, to_send, true)\n    ];\n}\n\nexport { blur, crossfade, draw, fade, fly, scale, slide };\n"],"names":["identity","x","tar","src","k","fn","Object","create","fns","forEach","run","thing","a","b","definition","ctx","$$scope","slot_ctx","get_slot_context","assign","slice","slot","slot_definition","dirty","get_slot_changes_fn","get_slot_context_fn","slot_changes","slot_context","p","lets","merged","len","Math","max","length","i","get_slot_changes","is_client","window","now","performance","Date","raf","requestAnimationFrame","cb","noop","tasks","Set","now2","task","c","delete","f","size","run_tasks","target","node","appendChild","document","root","getRootNode","ownerDocument","host","style_element","element","style","head","get_root_for_style","anchor","insertBefore","parentNode","removeChild","iterations","detaching","d","name2","createElement","data","createTextNode","text","event","handler","options","addEventListener","removeEventListener","attribute","value","removeAttribute","getAttribute","setAttribute","element2","Array","from","childNodes","nodes","predicate","processNode","createNode","dontUpdateLastIndex","claim_info","last_index","total_claimed","resultNode","replacement","splice","claim_order","attributes","svg","claim_node","nodeName","remove","j","name","push","v","createElementNS","svg_element","nodeType","dataStr","startsWith","splitText","claim_text","text2","wholeText","input","toggle","classList","selector","parent","body","querySelectorAll","active_docs","current_component","active","duration","delay","ease","uid","step","keyframes","t","rule","str","hash2","charCodeAt","hash","doc","add","stylesheet","__svelte_stylesheet","append_empty_stylesheet","sheet","current_rules","__svelte_rules","insertRule","cssRules","animation","previous","split","next","filter","anim","indexOf","deleted","join","deleteRule","clear","component","Error","$$","on_mount","after_update","key","context","set","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","flushing","seen_callbacks","pop","callback","has","fragment","update","before_update","add_render_callback","promise","direction","kind","dispatchEvent","type","detail","bubbles","e","createEvent","initCustomEvent","custom_event","outroing","outros","r","block","local","detach2","o","null_transition","params","intro","config","running_program","pending_program","animation_name","program","abs","start","end","group","easing","tick","css","create_rule","init2","dispatch","fulfill","is_function","then","promise2","info","token","index","resolved","child_ctx","current","needs_flush","blocks","block2","m","mount","current_component2","get_current_component","catch","error","error2","hasCatch","pending","levels","updates","update2","to_null_out","accounted_for","n","spread_props","props","bound","parent_nodes","l","customElement","on_destroy","new_on_destroy","map","flush","fill","instance","create_fragment","not_equal","append_styles","parent_component","blank_object","on_disconnect","Map","callbacks","skip_bound","ready","ret","rest","hydrate","children","detach","$destroy","this","$on","$set","$$props","obj","$$set","keys","subscriber_queue","stop","subscribers","new_value","safe_not_equal","run_queue","subscriber","subscribe","run2","invalidate","extendStatics","setPrototypeOf","__proto__","d2","b2","prototype","hasOwnProperty","call","thisArg","_arguments","P","generator","reject","result","done","fulfilled","rejected","apply","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","op","TypeError","s","ar","to","pack","arguments","concat","CONSTANTS","assert","assertion","message","assertionError","stringToByteArray$1","out","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","ENCODED_VALS","ENCODED_VALS_WEBSAFE","base64Decode","deepExtend","source","constructor","getTime","prop","Deferred","_this","wrapCallback","Deferred2","test","navigator","FirebaseError","_super","code","customData","FirebaseError2","captureStackTrace","ErrorFactory","__","service","serviceName","errors","_i","fullCode","template","replaceTemplate","fullMessage","ErrorFactory2","replace","PATTERN","JSON","parse","stringify","decode","header","claims","signature","parts","jsonEval","contextObj","res","aKeys","bKeys","aKeys_1","includes","aProp","bProp","isObject","deepEqual","_a2","bKeys_1","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","lengthMinusBlock","inbuf","digest","totalBits","Sha12","fnName","argName","stringLength","_delegate","Component","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","setInstanceCreatedCallback","Component2","Provider","container","instances","instancesDeferred","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","deferred","isInitialized","shouldAutoInitialize","getOrInitializeService","instanceIdentifier","getImmediate","optional","getComponent","setComponent","e_1","isComponentEager","_b","__values","entries","_c","_d","__read","instanceDeferred","e_1_1","clearInstance","__awaiter","services","__generator","values","all","__spreadArray","INTERNAL","_delete","isComponentSet","initialize","opts","e_2","_e","e_2_1","onInit","existingCallbacks","existingInstance","invokeOnInitCallbacks","e_3","callbacks_1","callbacks_1_1","e_3_1","Provider2","_a","LogLevel","LogLevel2","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","ComponentContainer2","il","jl","levelStringToEnum","debug","DEBUG","verbose","VERBOSE","INFO","warn","WARN","ERROR","silent","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","toISOString","method","console","__spreadArrays","Logger","_logLevel","_logHandler","_userLogHandler","defineProperty","Logger2","val","enumerable","configurable","setLogLevel","log","getPlatformInfoString","isVersionServiceProvider","library","version","logString","logger","PLATFORM_LOG_STRING","_apps","_components","app","componentName","ERROR_FACTORY","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","rawConfig","existingApp","newApp","FirebaseAppImpl","libraryKeyOrName","version2","variant","libraryMismatch","match","versionMismatch","warning","PlatformLoggerServiceImpl","registerVersion","SDK_VERSION","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","toString","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","domStorage","DOMStorageWrapper","MemoryStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","utf8Bytes","high","stringToByteArray","sha12","sha1Bytes","buildLogMessage_","varArgs","arg","firstLog_","logger_","persistent","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","dataSegs","substring","doubleToIEEE754String","bias","ln","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","stack","setTimeoutNonBlocking","time","timeout","setTimeout","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","accessToken","EmulatorTokenProvider","OWNER","FORGE_DOMAIN_RE","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfo","connURL","repoInfoNeedsQueryParam","pairs","counters_","incrementCounter","amount","deepCopy","collections","reporters","hashString","StatsCollection","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","statsManagerGetCollection","urlFn","repoInfoConnectionURL","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","PacketReceiver","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","attachEvent","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","BrowserPollConnection","href","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","send","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","display","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","newScript","async","onload","onreadystatechange","rstate","onerror","WebSocketImpl","MozWebSocket","WebSocket","keepaliveTimer","frames","totalFrames","WebSocketConnection","connectionURL_","isNodeSdk","headers","mySock","onopen","onclose","onmessage","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","setInterval","responsesRequiredToBeHealthy","healthyTimeout","initTransports_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","TransportManager","ALL_TRANSPORTS","initialTransport","upgradeTransport","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","onConnectionLost_","everConnected","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","put","pathString","onComplete","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","allowedEvents_","listeners_","trigger","eventType","listeners","on","validateEventType_","eventData","getInitialEvent","off","find","et","EventEmitter","online_","isMobileCordova","OnlineMonitor","currentlyOnline","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","Path","path","begin","pieces","childPathObj","childPieces","outerPath","innerPath","outer","pathGetFront","inner","newRelativePath","pathPopFront","other","pathGetLength","errorPrefix_","parts_","pathSlice","byteLength_","validationPath","validationPathToErrorString","hidden","visibilityChange","visible_","visible","VisibilityMonitor","ServerActions","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","initConnection_","request","_path","q","_queryObject","outstandingGet","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","Connection","interrupt","resume","isEmpty","delta","serverTimeOffset","listen2","normalizedPathString","map2","statusCode","explanation","queries","NamedNode","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","Index","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","KeyIndex","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","left","right","getNext","hasNext","peek","color","LLRBNode","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","SortedMapIterator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","value_","priorityNode_","LeafNode","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","pathIsEmpty","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","base122","root2","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","Base12Num","_defaultIndexMap","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","children_","indexMap_","ChildrenNode","NAME_COMPARATOR","Default","child2","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setMaxNode","json","nodeFromJSON","childData","children2","childrenHavePriority","childSet","NAME_ONLY_COMPARATOR","sortedChildSet","setNodeFromJSON","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","snapshotNode","oldSnap","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","changeChildRemoved","changeChildAdded","changeChildChanged","updateFullNode","newSnap","filtersNodes","getIndexedFilter","indexedFilter_","IndexedFilter","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","QueryParams","queryParams","qs","orderBy","PathIndex","viewFrom","listens_","listenId","ReadonlyRestClient","getListenId_","thisListen","queryStringParameters","queryParamsToRestQueryStringParameters","restRequest_","querystringParams","_loop_1","key2","value2","arrayVal","encodeURIComponent","querystring","xhr","XMLHttpRequest","responseText","rootNode_","getNode","updateSnapshot","newSnapshotNode","sparseSnapshotTree","newSparseSnapshotTree","prefixPath","func","tree","collection_","last_","newStats","stat","collection","server_","statsToReport_","statsListener_","StatsListener","reportStats_","reportedStats","haveStatsToReport","OperationType","OperationType2","fromUser","fromServer","tagged","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","AckUserWrite","newEmptyPath","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","query_","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","serverCache","viewCache","eventSnap","complete","newViewCache","CacheNode","serverSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childPath","findRootMostMatchingPathAndValue","relativePath","childExistingPathAndValue","pathChild","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","writeTree_","CompoundWrite","compoundWrite","rootmost","rootMostPath","newWriteTree2","newWrite","compoundWriteAddWrite","empty","compoundWriteGetCompleteNode","shadowingNode","applySubtreeWrite","writeTree","priorityWrite","newWriteTreeRef","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","pathContains","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","compoundWriteRemoveWrite","writeRecord","writes","treeRoot","writePath","compoundWriteAddWrites","deepNode","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","compoundWriteChildCompoundWrite","compoundWriteIsEmpty","compoundWriteHasCompleteWrite","compoundWriteApply","subMerge","writeTreeRef","writeTreeCalcCompleteEventCache","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeShadowingWrite","completeServerData","toIterate","writeTreeCalcIndexedSlice","existingServerCache","writeTreeCalcCompleteChild","changeMap","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","writes_","viewCache_","optCompleteServerCache_","serverNode","writeTreeRefCalcCompleteChild","viewCacheGetCompleteServerSnap","writeTreeRefCalcIndexedSlice","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","ChildChangeAccumulator","newViewCache2","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","writeTreeRefShadowingWrite","WriteTreeCompleteChildSource","writeTreeRefCalcCompleteEventCache","serverChildren","writeTreeRefCalcCompleteEventChildren","viewCacheUpdateEventSnap","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewCacheUpdateServerSnap","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewCacheGetCompleteEventSnap","changeValue","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","writeTreeRefCalcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","pathGetBack","pathParent","viewMergeTree","viewProcessorApplyMerge","childMergeTree","isUnknownDeepMerge","initialViewCache","eventRegistrations_","indexFilter","LimitedFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","EventGenerator","view","cache","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","viewProcessorApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","views","syncPoint","optCompleteServerCache","viewApplyOperation","serverCacheComplete","eventCacheComplete","View","syncPointGetView","initialChanges","viewGetInitialEvents","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","viewRemoveEventRegistration","viewIsEmpty","_repo","viewGetCompleteServerCache","syncPointGetCompleteView","syncPointViewForQuery","syncTreeNextQueryTag_","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTree","newData","syncTreeApplyOperationToSyncPoints_","record","writeTreeGetWrite","writeTreeRemoveWrite","maybeSyncPoint","syncPointViewExistsForQuery","removedAndEvents","syncPointRemoveEventRegistration","removingDefault","query2","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","syncPointGetQueryViews","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","foundAncestorDefaultView","pathToSyncPoint","sp","syncPointGetCompleteServerCache","SyncPoint","childSyncPoint","viewAlreadyExists","queryKey","syncPointAddEventRegistration","writeTreeChildWrites","queriesToStop","view2","childQueries","queryToStop","syncTreeSetupListener_","serverCache2","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","writeTreeRefChild","syncPointApplyOperation","viewGetServerCache","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","newOperationSourceServerTaggedQuery","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","syncTreeRemoveEventRegistration","splitIndex","ExistingValueProvider","syncTree_","path_","DeferredValueProvider","syncTreeCalcCompleteEventCache","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","unused","existingNode","resolveDeferredValueSnapshot","resolveDeferredValue","rawPri","leafNode","childrenNode","childCount","pathObj","Tree","includeSelf","childrenFirst","treeGetPath","childEmpty","treeGetValue","treeHasChildren","treeIsEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","validateFirebaseData","errorPrefix2","ValidationPath","hasDotValue","hasActualChild","last","validatePathString","argumentName","errorPrefix","validateUrl","parsedUrl","isValidRootPathString","eventLists_","recursionDepth_","eventQueue","eventDataList","currList","getPath","pathEquals","eventPath","changedPath","sentAll","eventList","eventFn","getEventRunner","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","EventQueue","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repo","appId","authOverride","search","isMerge","repoOnConnectStatus","connectStatus","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","StatsReporter","infoData_","SnapshotHolder","infoSyncTree_","SyncTree","infoEvents","syncTreeApplyServerOverwrite","serverSyncTree_","repoServerTime","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","repoRerunTransactions","repoGenerateServerValues","resolvedOnDisconnectTree","resolveDeferredValueTree","repoGetAncestorTransactionNode","transactionNode","treeSubTree","repoAbortTransactions","excludeSets","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","repoGetLatestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","syncTreeAckUserWrite","currentOutputSnapshotResolved","unwatcher","abortReason","rootMostTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","repoGetNextWriteId","syncTreeApplyUserOverwrite","applyLocally","transactionQueue","order","nodeQueue","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","RepoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","snapshot","ref2","ref","getEventType","exportVal","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","_orderByCalled","ReferenceImpl","queryParamsGetQueryObject","isEqual","getModularInstance","QueryImpl","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","_node","_index","child","childRef","DataSnapshot","exists","hasChildren","db","_checkNotDeleted","_root","callbackContext","DataEvent","CancelEvent","ValueEventRegistration","eventToCheck","ChildEventRegistration","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","CallbackContext","syncTreeAddEventRegistration","repoRemoveEventCallbackForQuery","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","process","env","authTokenProvider","FirebaseAuthTokenProvider","appRepos","Repo","repoManagerCreateRepo","AppCheckTokenProvider","Database","_repoInternal","_instanceStarted","_rootInternal","apiName","getApp","_getProvider","cubicOut","opacity","getComputedStyle","target_opacity","transform","sd","od","_t","repoManagerDatabaseFromApp","registerDatabase"],"mappings":"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"}